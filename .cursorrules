# Elegent Electronics Store Project - Common Coding Standards

## Project Structure Standards
This file defines common standards across all three projects: Admin Dashboard, Customer Frontend, and Backend API.

## Common Patterns and Standards

### 1. Shared Constants and Resources

All string constants, error messages, and configuration values should be centralized in a constants file for each project:

    ```typescript
// Example - Frontend projects
// src/constants/index.ts
export const API_BASE_URL = 'http://localhost:8080/api/v1';
export const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
export const SUPPORTED_IMAGE_FORMATS = ['image/jpeg', 'image/png', 'image/webp'];
export const DEFAULT_CURRENCY = '₹'; // INR Currency Symbol
export const DEFAULT_LOCALE = 'en-IN'; // Indian English Locale
export const DEFAULT_DATE_FORMAT = 'DD-MM-YYYY'; // Date format for display
export const DEFAULT_DATE_FORMAT_ISO = 'YYYY-MM-DD'; // Date format for API
export const DEFAULT_DATETIME_FORMAT = 'DD-MM-YYYYTHH:mm:ss.SSSZ'; // DateTime format with timezone

export const MESSAGES = {
  ERROR: {
    GENERIC: 'An error occurred. Please try again.',
    NETWORK: 'Network error. Please check your connection.',
    UNAUTHORIZED: 'You are not authorized to perform this action.',
    VALIDATION: 'Please check your input and try again.'
  },
  SUCCESS: {
    SAVE: 'Changes saved successfully.',
    DELETE: 'Item deleted successfully.',
    UPDATE: 'Item updated successfully.',
    CREATE: 'Item created successfully.'
  }
};

// Theme-aware color constants
export const COLORS = {
  // Primary brand color
  PRIMARY: '#203120',
  // Secondary color for accents
  SECONDARY: '#558855',
  // Status colors
  SUCCESS: '#4caf50',
  ERROR: '#f44336',
  WARNING: '#ff9800',
  INFO: '#2196f3',
  // Background colors - to be accessed via theme
  BACKGROUND: {
    LIGHT: '#f8f9f6',
    DARK: '#0f170f'
  },
  // Text colors - to be accessed via theme
  TEXT: {
    LIGHT: '#263126',
    DARK: '#e0e8e0'
  }
};

// Date formatting utility functions
export const formatDate = (date: Date | string): string => {
  if (!date) return '';
  const d = typeof date === 'string' ? new Date(date) : date;
  const day = d.getDate().toString().padStart(2, '0');
  const month = (d.getMonth() + 1).toString().padStart(2, '0');
  const year = d.getFullYear();
  return `${ day } -${ month } -${ year } `;
};

// DateTime formatting utility functions
export const formatDateTime = (date: Date | string): string => {
  if (!date) return '';
  // Use built-in date formatting or a library like date-fns
  // to format as "DD-MM-YYYYTHH:mm:ss.SSSZ"
  const d = typeof date === 'string' ? new Date(date) : date;
  const day = d.getDate().toString().padStart(2, '0');
  const month = (d.getMonth() + 1).toString().padStart(2, '0');
  const year = d.getFullYear();
  const hours = d.getHours().toString().padStart(2, '0');
  const minutes = d.getMinutes().toString().padStart(2, '0');
  const seconds = d.getSeconds().toString().padStart(2, '0');
  const milliseconds = d.getMilliseconds().toString().padStart(3, '0');
  const timezone = d.getTimezoneOffset() === 0 
    ? 'Z' 
    : `${ d.getTimezoneOffset() > 0 ? '-' : '+' }${ Math.abs(Math.floor(d.getTimezoneOffset() / 60)).toString().padStart(2, '0') }:${ (d.getTimezoneOffset() % 60).toString().padStart(2, '0') } `;
  
  return `${ day } -${ month } -${ year }T${ hours }:${ minutes }:${ seconds }.${ milliseconds }${ timezone } `;
};
```

    ```java
// Example - Backend API
// src/main/java/com/company/project/constants/AppConstants.java
public final class AppConstants {
    private AppConstants() {
        // Private constructor to prevent instantiation
    }
    
    public static final String API_V1 = "/api/v1";
    public static final int MAX_PAGE_SIZE = 50;
    public static final String DEFAULT_PAGE_SIZE = "10";
    public static final String DEFAULT_PAGE_NUMBER = "0";
    public static final String DEFAULT_CURRENCY = "INR";
    public static final String DEFAULT_COUNTRY = "IN";
    public static final String DEFAULT_DATE_FORMAT = "dd-MM-yyyy"; // Date format for display
    public static final String DEFAULT_DATE_FORMAT_ISO = "yyyy-MM-dd"; // Date format for API
    public static final String DEFAULT_DATETIME_FORMAT = "dd-MM-yyyy'T'HH:mm:ss.SSSZ"; // DateTime format with timezone
    
    public static final class ErrorMessages {
        public static final String RESOURCE_NOT_FOUND = "Requested resource not found";
        public static final String UNAUTHORIZED = "Unauthorized access";
        public static final String VALIDATION_FAILED = "Validation failed";
    }
}
```

### 2. Common API Response Structure

All API responses must follow the standard format:

```typescript
// src/types/common.ts
export interface ApiResponse<T> {
  status: "SUCCESS" | "ERROR";
  code: number;
  message: string;
  data: T;
  timestamp: string;
}

// Paginated response interface
export interface Page<T> {
  content: T[];
  pageable: {
    pageNumber: number;
    pageSize: number;
    sort: {
      sorted: boolean;
      unsorted: boolean;
      empty: boolean;
    };
    offset: number;
    unpaged: boolean;
    paged: boolean;
  };
  last: boolean;
  totalElements: number;
  totalPages: number;
  size: number;
  number: number;
  sort: {
    sorted: boolean;
    unsorted: boolean;
    empty: boolean;
  };
  first: boolean;
  numberOfElements: number;
  empty: boolean;
}

// Helper type for paginated API responses
export type PagedApiResponse<T> = ApiResponse<Page<T>>;
```

    ```java
// src/main/java/com/company/project/dto/response/ApiResponse.java
public class ApiResponse<T> {
    private String status;
    private int code;
    private String message;
    private T data;
    private String timestamp;
    
    // Constructors, getters, setters
    
    public static <T> ApiResponse<T> success(T data) {
        return new ApiResponse<>("SUCCESS", 200, "Operation successful", data);
    }
    
    public static <T> ApiResponse<T> error(int code, String message) {
        return new ApiResponse<>("ERROR", code, message, null);
    }
}

// src/main/java/com/company/project/dto/response/PageResponse.java
public class PageResponse<T> {
    private List<T> content;
    private int pageNumber;
    private int pageSize;
    private long totalElements;
    private int totalPages;
    private boolean last;
    private boolean first;
    
    // Constructors, getters, setters
    
    public static <T> PageResponse<T> from(Page<T> page) {
        PageResponse<T> response = new PageResponse<>();
        response.setContent(page.getContent());
        response.setPageNumber(page.getNumber());
        response.setPageSize(page.getSize());
        response.setTotalElements(page.getTotalElements());
        response.setTotalPages(page.getTotalPages());
        response.setLast(page.isLast());
        response.setFirst(page.isFirst());
        return response;
    }
}
```

### 3. Component Creation Standards

When creating new components:

1. Use functional components with TypeScript
2. Export components through index files
3. Follow naming conventions: PascalCase for components
4. Create accompanying test files
5. Include prop interface definitions
6. Document component purpose and usage
7. Support theme - switching with theme - aware styles

#### Example Index File Pattern:

```typescript
// src/components/Button/index.ts
export { default } from './Button';
export * from './Button.types';
```

#### Example Component Structure:

```typescript
// src/components/Button/Button.tsx
import React from 'react';
import { ButtonProps } from './Button.types';
import { useTheme } from '@mui/material/styles';

/**
 * Primary button component for user interaction
 * @param {ButtonProps} props - Button properties
 * @returns {JSX.Element} - Button component
 */
const Button: React.FC<ButtonProps> = ({ 
  children, 
  variant = 'primary',
  disabled = false,
  onClick
}) => {
  // Get current theme to apply theme-aware styles
  const theme = useTheme();
  
  return (
    <button 
      className={`btn btn - ${ variant } `}
      disabled={disabled}
      onClick={onClick}
      style={{
        // Apply theme-aware styles
        backgroundColor: theme.palette.mode === 'dark' ? '#2a3b2a' : '#e8f5e9',
        color: theme.palette.mode === 'dark' ? '#ffffff' : '#1b5e20'
      }}
    >
      {children}
    </button>
  );
};

export default Button;
```

    ```typescript
// src/components/Button/Button.types.ts
export interface ButtonProps {
  /** Button content */
  children: React.ReactNode;
  /** Button visual style */
  variant?: 'primary' | 'secondary' | 'danger';
  /** Disables the button when true */
  disabled?: boolean;
  /** Click handler function */
  onClick?: () => void;
}
```

    ```typescript
// src/components/Button/Button.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { ThemeProvider } from '@mui/material/styles';
import { createTheme } from '@mui/material/styles';
import Button from './Button';

// Create theme mock for testing
const theme = createTheme({
  palette: {
    mode: 'light'
  }
});

describe('Button Component', () => {
  test('renders button with children', () => {
    render(
      <ThemeProvider theme={theme}>
        <Button>Click Me</Button>
      </ThemeProvider>
    );
    expect(screen.getByText('Click Me')).toBeInTheDocument();
  });
  
  test('calls onClick when clicked', () => {
    const handleClick = jest.fn();
    render(
      <ThemeProvider theme={theme}>
        <Button onClick={handleClick}>Click Me</Button>
      </ThemeProvider>
    );
    fireEvent.click(screen.getByText('Click Me'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
});
```

### 4. API Integration Standards

API calls should be centralized in service files and include validation:

```typescript
// src/services/product.service.ts
import axios from '../utils/axios-config';
import { ApiResponse, PagedApiResponse } from '../types/common';
import { Product, ProductCreateRequest } from '../types/product.types';
import { validateProduct } from '../utils/validators';

const BASE_URL = '/products';

export const ProductService = {
  /**
   * Get all products with optional pagination
   * @param page Page number (0-based)
   * @param size Items per page
   * @returns ApiResponse with products array
   */
  async getAllProducts(page = 0, size = 10): Promise<PagedApiResponse<Product>> {
    try {
      const response = await axios.get(`${ BASE_URL }?page = ${ page }& size=${ size } `);
      return response.data;
    } catch (error) {
      throw error;
    }
  },
  
  /**
   * Create a new product
   * @param product Product data to create
   * @returns ApiResponse with created product
   * @throws {Error} If validation fails
   */
  async createProduct(product: ProductCreateRequest): Promise<ApiResponse<Product>> {
    try {
      // Validate product data before submitting
      const validationErrors = validateProduct(product);
      if (validationErrors.length > 0) {
        throw new Error(`Validation errors: ${ validationErrors.join(', ') } `);
      }
      
      const response = await axios.post(BASE_URL, product);
      return response.data;
    } catch (error) {
      throw error;
    }
  }
};
```

### 5. Testing Standards

All components and services must have corresponding test files:

1. Component tests should verify rendering and user interactions
2. Service tests should mock API responses
3. Maintain minimum 80 % test coverage
4. Use descriptive test names that explain what is being tested
5. Test components with both light and dark themes when relevant

### 6. Type Definitions

Types should be defined in separate files and follow these conventions:

1. Interface names should be prefixed with 'I' for entities(IProduct, IUser)
2. Use type aliases for complex types
3. Export types through index files

    ```typescript
// src/types/product.types.ts
export interface IProduct {
  id: number;
  name: string;
  price: number;
  status: 'ACTIVE' | 'INACTIVE';
}

export type ProductCreateRequest = Omit<IProduct, 'id'>;
export type ProductUpdateRequest = Partial<IProduct>;
```

### 7. Documentation Standards

1. Use JSDoc for TypeScript / JavaScript files
2. Use Javadoc for Java files
3. Document all public methods, functions, and components
4. Include parameter descriptions and return values
5. Document exceptions and edge cases

    ```typescript
/**
 * Formats a price to the Indian Rupee format
 * @param price - The price value to format
 * @param locale - The locale to use for formatting (default: 'en-IN')
 * @param currency - The currency code (default: 'INR')
 * @returns Formatted price string
 * @throws {Error} If price is negative
 */
export const formatPrice = (
  price: number, 
  locale = 'en-IN', 
  currency = 'INR'
): string => {
  if (price < 0) throw new Error('Price cannot be negative');
  
  return new Intl.NumberFormat(locale, {
    style: 'currency',
    currency
  }).format(price);
};
```

### 8. Theme Management Standards

All UI components must support both light and dark themes:

1. Use the theme context to access current theme
2. Define theme - aware colors using the theme palette
3. Test components in both light and dark modes
4. Use the provided color constants for consistent theming
5. NEVER define colors directly in components, always access them from the theme
6. Always use the theme's color tokens instead of hardcoded values

    ```typescript
// src/context/ThemeContext.tsx
import React, { createContext, useState, useContext, ReactNode } from 'react';
import { ThemeProvider as MuiThemeProvider, createTheme } from '@mui/material/styles';
import { COLORS } from '../constants';

type ThemeMode = 'light' | 'dark';

interface ThemeContextType {
  mode: ThemeMode;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within ThemeProvider');
  }
  return context;
};

interface ThemeProviderProps {
  children: ReactNode;
}

export const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {
  const [mode, setMode] = useState<ThemeMode>('light');

  const toggleTheme = () => {
    setMode(prevMode => (prevMode === 'light' ? 'dark' : 'light'));
  };

  const theme = createTheme({
    palette: {
      mode,
      primary: {
        main: COLORS.PRIMARY,
      },
      secondary: {
        main: COLORS.SECONDARY,
      },
      background: {
        default: mode === 'light' ? COLORS.BACKGROUND.LIGHT : COLORS.BACKGROUND.DARK,
        paper: mode === 'light' ? '#ffffff' : '#1e1e1e',
      },
      text: {
        primary: mode === 'light' ? COLORS.TEXT.LIGHT : COLORS.TEXT.DARK,
        secondary: mode === 'light' ? 'rgba(0, 0, 0, 0.6)' : 'rgba(255, 255, 255, 0.7)',
      },
      success: {
        main: COLORS.SUCCESS,
      },
      error: {
        main: COLORS.ERROR,
      },
      warning: {
        main: COLORS.WARNING,
      },
      info: {
        main: COLORS.INFO,
      },
    },
  });

  return (
    <ThemeContext.Provider value={{ mode, toggleTheme }}>
      <MuiThemeProvider theme={theme}>{children}</MuiThemeProvider>
    </ThemeContext.Provider>
  );
};
```

    ** Note on ThemeProvider **: The application should have a single ThemeProvider at the root level that wraps the entire application.Individual components should NOT be wrapped in separate ThemeProvider instances.The examples showing ThemeProvider wrapping in test files are specific to testing and should not be copied to actual component implementation.

```tsx
// src/App.tsx - Root level ThemeProvider
import React from 'react';
import { ThemeProvider } from './context/ThemeContext';
import Routes from './Routes';

const App: React.FC = () => {
  return (
    <ThemeProvider>
      <Routes />
    </ThemeProvider>
  );
};

export default App;
```

#### Example of proper color usage from theme:

```tsx
// CORRECT: Using theme for styling
const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  const theme = useTheme();
  
  return (
    <Card
      sx={{
        backgroundColor: theme.palette.background.paper,
        color: theme.palette.text.primary,
        border: `1px solid ${ theme.palette.divider } `,
      }}
    >
      {/* Component content */}
    </Card>
  );
};

// INCORRECT: Hardcoding colors
const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  return (
    <Card
      sx={{
        backgroundColor: '#ffffff', // ❌ Don't hardcode colors
        color: '#333333',           // ❌ Don't hardcode colors
        border: '1px solid #dddddd' // ❌ Don't hardcode colors
      }}
    >
      {/* Component content */}
    </Card>
  );
};
```

    ```typescript
/**
 * Formats a date to the Indian date format (DD-MM-YYYY)
 * @param date - The date value to format
 * @returns Formatted date string
 */
export const formatDateDisplay = (
  date: Date | string
): string => {
  if (!date) return '';
  
  // Use the formatDate function from constants
  return formatDate(date);
};

/**
 * Formats a date with time to the API format (DD-MM-YYYYTHH:mm:ss.SSSZ)
 * @param date - The date value to format
 * @returns Formatted date-time string with timezone
 */
export const formatDateTimeDisplay = (
  date: Date | string
): string => {
  if (!date) return '';
  
  // Use the formatDateTime function from constants
  return formatDateTime(date);
};
```

## Sample Implementation Examples

### Frontend Component Example(React)

    ```typescript
// src/components/ProductCard/ProductCard.tsx
import React from 'react';
import { Card, CardContent, Typography, Button } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import { formatPrice } from '../../utils/formatters';
import { IProduct } from '../../types/product.types';

interface ProductCardProps {
  product: IProduct;
  onAddToCart: (product: IProduct) => void;
}

const ProductCard: React.FC<ProductCardProps> = ({ product, onAddToCart }) => {
  const theme = useTheme();
  
  return (
    <Card 
      sx={{ 
        bgcolor: theme.palette.background.paper,
        color: theme.palette.text.primary
      }}
    >
      <CardContent>
        <Typography variant="h5">{product.name}</Typography>
        <Typography variant="body2" color="primary">
          {formatPrice(product.price)}
        </Typography>
        <Button 
          variant="contained" 
          color="primary"
          onClick={() => onAddToCart(product)}
        >
          Add to Cart
        </Button>
      </CardContent>
    </Card>
  );
};

export default ProductCard;
```

### Backend API Endpoint Example(Spring Boot)

    ```java
/**
 * Controller handling product-related API endpoints
 */
@RestController
@RequestMapping(AppConstants.API_V1 + "/products")
public class ProductController {

    private final ProductService productService;

    /**
     * Constructor injection for dependencies
     * @param productService The product service
     */
    @Autowired
    public ProductController(ProductService productService) {
        this.productService = productService;
    }

    /**
     * Get products with pagination
     * @param page Page number (0-based)
     * @param size Items per page
     * @return ApiResponse containing page of products
     */
    @GetMapping
    public ApiResponse<Page<ProductResponse>> getProducts(
            @RequestParam(defaultValue = AppConstants.DEFAULT_PAGE_NUMBER) int page,
            @RequestParam(defaultValue = AppConstants.DEFAULT_PAGE_SIZE) int size) {
        
        Page<ProductResponse> products = productService.getAllProducts(page, size);
        return ApiResponse.success(products);
    }

    /**
     * Create a new product
     * @param productRequest Product creation data
     * @return ApiResponse with created product
     */
    @PostMapping
    public ApiResponse<ProductResponse> createProduct(@Valid @RequestBody ProductCreateRequest productRequest) {
        ProductResponse created = productService.createProduct(productRequest);
        return ApiResponse.success(created);
    }
    
    /**
     * Update product status
     * @param id Product ID
     * @param status New status (ACTIVE/INACTIVE)
     * @return ApiResponse with updated product
     */
    @PutMapping("/{id}/status")
    public ApiResponse<ProductResponse> updateStatus(
            @PathVariable Long id,
            @RequestParam Status status) {
        ProductResponse updated = productService.updateStatus(id, status);
        return ApiResponse.success(updated);
    }
}
```

## Project - Specific Requirements

### electronicstoreapi(Backend API)
    - Use package - by - feature organization
        - Include proper validation annotations on DTOs
            - Follow RESTful naming conventions for endpoints
                - Implement proper exception handling with @ControllerAdvice
                - Document all API endpoints with OpenAPI / Swagger
                - Support India - specific formats(INR currency, Indian addresses)
                    - Implement validation for all incoming requests

### electronicstoreadmin(Admin Dashboard)
    - Use Material - UI components consistently
        - Implement protected routes with role - based access
            - Organize components by feature
                - Use React Context API for state management
                    - Create reusable form components
                        - Support dark / light theme switching
                            - Use centralized color theme system

### electronicstore(Customer Frontend)
    - Focus on responsive design for all screen sizes
        - Optimize for performance and SEO
            - Implement cart functionality with local storage
                - Create intuitive user interface
                    - Use skeleton loaders for better UX during data loading
                        - Support dark / light theme switching
                            - Use INR currency formatting(₹) for all prices

## Files To Create When Adding New Features

### For Frontend(both Admin and Customer)
1. Component Files:
- ComponentName.tsx(Component implementation)
    - ComponentName.types.ts(TypeScript interfaces)
    - index.ts(Export file)
    - ComponentName.test.tsx(Tests)

2. API Integration:
- services / featureName.service.ts(API calls)
    - types / featureName.types.ts(Type definitions)
    - utils / validators.ts(Request validation)

3. Theme Support:
- Make sure components use theme - aware styling
    - Test in both light and dark themes
        - Use color constants from the centralized theme system

### For Backend
1. Feature Files:
- controller / FeatureController.java
    - service / FeatureService.java
    - service / impl / FeatureServiceImpl.java
    - repository / FeatureRepository.java
    - entity / Feature.java
    - dto / request / FeatureRequest.java
    - dto / response / FeatureResponse.java
    - validator / FeatureValidator.java

## Enforced Folders
All projects must maintain these folder structures:

### electronicstoreadmin & electronicstore
    - src / components / - UI components
        - src / pages / - Page components
            - src / types / - TypeScript type definitions
- src / utils / - Utility functions
    - src / services / - API service integration
        - src / constants / - Application constants
            - src / context / - React context providers(including theme context)
                - src / hooks / - Custom React hooks
                    - src / theme / - Theme configuration

### electronicstoreapi
    - src / main / java / com / company / project / controller / - API endpoints
        - src / main / java / com / company / project / service / - Business logic
            - src / main / java / com / company / project / repository / - Data access
                - src / main / java / com / company / project / entity / - Data models
                    - src / main / java / com / company / project / dto / - Data transfer objects
                        - src / main / java / com / company / project / exception / - Exception handling
                            - src / main / java / com / company / project / security / - Security configuration
                                - src / main / java / com / company / project / constants / - Application constants
                                    - src / main / java / com / company / project / validator / - Request validators 